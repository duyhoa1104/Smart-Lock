CCS PCM C Compiler, Version 5.015, 5967               27-Jun-22 22:52

               Filename:   D:\STUDY\hk6\DoAn1\code\Eprom\main.lst

               ROM used:   2158 words (26%)
                           Largest free fragment is 2048
               RAM used:   34 (9%) at main() level
                           54 (15%) worst case
               Stack used: 9 locations (7 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.4
0028:  GOTO   02B
0029:  BTFSC  0B.1
002A:  GOTO   04C
002B:  MOVF   22,W
002C:  MOVWF  04
002D:  MOVF   23,W
002E:  MOVWF  77
002F:  MOVF   24,W
0030:  MOVWF  78
0031:  MOVF   25,W
0032:  MOVWF  79
0033:  MOVF   26,W
0034:  MOVWF  7A
0035:  MOVF   27,W
0036:  BSF    03.6
0037:  MOVWF  0D
0038:  BCF    03.6
0039:  MOVF   28,W
003A:  BSF    03.6
003B:  MOVWF  0F
003C:  BCF    03.6
003D:  MOVF   29,W
003E:  BSF    03.6
003F:  MOVWF  0C
0040:  BCF    03.6
0041:  MOVF   2A,W
0042:  BSF    03.6
0043:  MOVWF  0E
0044:  BCF    03.6
0045:  MOVF   20,W
0046:  MOVWF  0A
0047:  SWAPF  21,W
0048:  MOVWF  03
0049:  SWAPF  7F,F
004A:  SWAPF  7F,W
004B:  RETFIE
004C:  BCF    0A.3
004D:  BCF    0A.4
004E:  GOTO   09F
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
004F:  BCF    0A.0
0050:  BCF    0A.1
0051:  BCF    0A.2
0052:  ADDWF  02,F
0053:  RETLW  28
0054:  RETLW  0C
0055:  RETLW  01
0056:  RETLW  06
0057:  BCF    0A.0
0058:  BCF    0A.1
0059:  BCF    0A.2
005A:  ADDWF  02,F
005B:  RETLW  31
005C:  RETLW  34
005D:  RETLW  37
005E:  RETLW  2A
005F:  RETLW  32
0060:  RETLW  35
0061:  RETLW  38
0062:  RETLW  30
0063:  RETLW  33
0064:  RETLW  36
0065:  RETLW  39
0066:  RETLW  65
0067:  RETLW  0C
0068:  RETLW  08
0069:  RETLW  64
006A:  RETLW  75
006B:  BCF    0A.0
006C:  BCF    0A.1
006D:  BCF    0A.2
006E:  ADDWF  02,F
006F:  RETLW  00
*
00AC:  DATA 20,10
00AD:  DATA 00,00
00AE:  DATA 3E,10
00AF:  DATA 00,01
00B0:  DATA 3E,10
00B1:  DATA 00,01
00B2:  DATA 20,10
00B3:  DATA 00,00
00B4:  DATA 3E,10
00B5:  DATA 00,01
00B6:  DATA 55,37
00B7:  DATA EC,37
00B8:  DATA E3,35
00B9:  DATA 00,01
00BA:  DATA 20,10
00BB:  DATA 00,01
00BC:  DATA 43,34
00BD:  DATA 61,37
00BE:  DATA E7,32
00BF:  DATA 20,28
00C0:  DATA E1,39
00C1:  DATA 73,00
00C2:  DATA D4,3C
00C3:  DATA F0,32
00C4:  DATA 20,28
00C5:  DATA E1,39
00C6:  DATA 73,00
00C7:  DATA C3,37
00C8:  DATA 72,39
00C9:  DATA E5,31
00CA:  DATA 74,00
00CB:  DATA 49,37
00CC:  DATA E3,37
00CD:  DATA 72,39
00CE:  DATA E5,31
00CF:  DATA 74,00
00D0:  DATA D2,32
00D1:  DATA F4,3C
00D2:  DATA F0,32
00D3:  DATA 20,28
00D4:  DATA E1,39
00D5:  DATA 73,1D
00D6:  DATA 00,01
00D7:  DATA 49,37
00D8:  DATA E3,37
00D9:  DATA 72,39
00DA:  DATA E5,31
00DB:  DATA 74,00
00DC:  DATA 32,10
00DD:  DATA F4,34
00DE:  DATA ED,32
00DF:  DATA 73,00
00E0:  DATA D2,32
00E1:  DATA 73,3A
00E2:  DATA 61,39
00E3:  DATA F4,34
00E4:  DATA EE,33
00E5:  DATA 2E,17
00E6:  DATA 2E,17
00E7:  DATA 2E,17
00E8:  DATA 2E,00
00E9:  DATA 0C,00
00EA:  DATA CE,32
00EB:  DATA 77,10
00EC:  DATA D0,30
00ED:  DATA F3,39
00EE:  DATA F7,37
00EF:  DATA 72,32
00F0:  DATA 3A,00
00F1:  DATA 0C,00
00F2:  DATA D2,32
00F3:  DATA F4,3C
00F4:  DATA F0,32
00F5:  DATA 3A,00
00F6:  DATA 0C,00
00F7:  DATA D0,30
00F8:  DATA F3,39
00F9:  DATA A0,34
00FA:  DATA 73,10
00FB:  DATA 43,34
00FC:  DATA 61,37
00FD:  DATA E7,32
00FE:  DATA 64,00
00FF:  DATA 0C,00
0100:  DATA D2,32
0101:  DATA F4,3C
0102:  DATA F0,32
0103:  DATA 20,28
0104:  DATA E1,39
0105:  DATA F3,3B
0106:  DATA 6F,39
0107:  DATA 64,00
0108:  DATA E4,37
0109:  DATA E5,39
010A:  DATA EE,13
010B:  DATA 74,10
010C:  DATA ED,30
010D:  DATA F4,31
010E:  DATA 68,00
010F:  DATA 0C,00
0110:  DATA D2,32
0111:  DATA 73,3A
0112:  DATA 61,39
0113:  DATA F4,34
0114:  DATA EE,33
0115:  DATA 2E,17
0116:  DATA 2E,17
0117:  DATA 2E,17
0118:  DATA 2E,00
*
0223:  MOVF   0B,W
0224:  MOVWF  41
0225:  BCF    0B.7
0226:  BSF    03.5
0227:  BSF    03.6
0228:  BSF    0C.7
0229:  BSF    0C.0
022A:  NOP
022B:  NOP
022C:  BCF    03.5
022D:  BCF    03.6
022E:  BTFSC  41.7
022F:  BSF    0B.7
0230:  BSF    03.6
0231:  MOVF   0C,W
0232:  ANDLW  7F
0233:  BTFSC  03.2
0234:  GOTO   277
0235:  BCF    03.6
0236:  MOVWF  41
0237:  BSF    03.6
0238:  MOVF   0D,W
0239:  BCF    03.6
023A:  MOVWF  42
023B:  BSF    03.6
023C:  MOVF   0F,W
023D:  BCF    03.6
023E:  MOVWF  43
023F:  MOVF   41,W
0240:  MOVWF  44
0241:  CALL   1F9
0242:  MOVF   42,W
0243:  BSF    03.6
0244:  MOVWF  0D
0245:  BCF    03.6
0246:  MOVF   43,W
0247:  BSF    03.6
0248:  MOVWF  0F
0249:  BCF    03.6
024A:  MOVF   0B,W
024B:  MOVWF  44
024C:  BCF    0B.7
024D:  BSF    03.5
024E:  BSF    03.6
024F:  BSF    0C.7
0250:  BSF    0C.0
0251:  NOP
0252:  NOP
0253:  BCF    03.5
0254:  BCF    03.6
0255:  BTFSC  44.7
0256:  BSF    0B.7
0257:  BSF    03.6
0258:  RLF    0C,W
0259:  RLF    0E,W
025A:  ANDLW  7F
025B:  BTFSC  03.2
025C:  GOTO   277
025D:  BCF    03.6
025E:  MOVWF  41
025F:  BSF    03.6
0260:  MOVF   0D,W
0261:  BCF    03.6
0262:  MOVWF  42
0263:  BSF    03.6
0264:  MOVF   0F,W
0265:  BCF    03.6
0266:  MOVWF  43
0267:  MOVF   41,W
0268:  MOVWF  44
0269:  CALL   1F9
026A:  MOVF   42,W
026B:  BSF    03.6
026C:  MOVWF  0D
026D:  BCF    03.6
026E:  MOVF   43,W
026F:  BSF    03.6
0270:  MOVWF  0F
0271:  INCF   0D,F
0272:  BTFSC  03.2
0273:  INCF   0F,F
0274:  BCF    03.6
0275:  GOTO   223
0276:  BSF    03.6
0277:  BCF    03.6
0278:  RETURN
*
02A8:  BCF    0A.0
02A9:  BSF    0A.1
02AA:  BCF    0A.2
02AB:  ADDWF  02,F
02AC:  GOTO   280
02AD:  GOTO   28A
02AE:  GOTO   294
02AF:  GOTO   29E
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #FUSES HS 
.................... #FUSES NOWDT 
.................... #use delay(crystal=20M) 
.................... #include <lcd.h> 
.................... #define _lcd_h_ 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #define NULL 0 
.................... #use delay(clock=16000000) 
*
007D:  MOVLW  50
007E:  MOVWF  04
007F:  BCF    03.7
0080:  MOVF   00,W
0081:  BTFSC  03.2
0082:  GOTO   091
0083:  MOVLW  05
0084:  MOVWF  78
0085:  CLRF   77
0086:  DECFSZ 77,F
0087:  GOTO   086
0088:  DECFSZ 78,F
0089:  GOTO   085
008A:  MOVLW  2E
008B:  MOVWF  77
008C:  DECFSZ 77,F
008D:  GOTO   08C
008E:  GOTO   08F
008F:  DECFSZ 00,F
0090:  GOTO   083
0091:  RETURN
.................... void lcd_init(void);             // Ham dung de khoi dong C.LCD. 
.................... byte lcd_read_byte(void);         // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... byte lcd_read_nibble(void);         // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
.................... void lcd_send_byte(byte address, byte n);   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... void lcd_send_nibble(byte n);      // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... void lcd_gotoxy(byte x, byte y);   // Ham thiet lap vi tri ghi tren C.LCD. 
.................... char lcd_getc(byte x, byte y);      // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... void lcd_putc(char c);            // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... void lcd_clear(void); 
.................... void lcd_puts(char *str); 
.................... // Khai bao bien. 
.................... // Dinh nghia cac thong so. 
.................... //!#define LCD_RS_PIN         PIN_B1   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_B2 
.................... //!#define LCD_ENABLE_PIN     PIN_B3 
.................... //!#define LCD_DATA4          PIN_B4 
.................... //!#define LCD_DATA5          PIN_B5 
.................... //!#define LCD_DATA6          PIN_B6 
.................... //!#define LCD_DATA7          PIN_B7  
....................  
.................... //!#define LCD_RS_PIN         PIN_C0   // Cac ket noi C.LCD voi vi dieu khien. 
.................... //!#define LCD_RW_PIN         PIN_C1 
.................... //!#define LCD_ENABLE_PIN     PIN_C2 
.................... //!#define LCD_DATA4          PIN_C3 
.................... //!#define LCD_DATA5          PIN_C4 
.................... //!#define LCD_DATA6          PIN_C5 
.................... //!#define LCD_DATA7          PIN_C6 
.................... //! 
....................  
.................... #define LCD_RS_PIN      PIN_B7   // Cac ket noi C.LCD voi vi dieu khien. 
.................... #define LCD_RW_PIN      PIN_B6 
.................... #define LCD_ENABLE_PIN  PIN_B5 
.................... #define LCD_DATA4       PIN_B4 
.................... #define LCD_DATA5       PIN_B3 
.................... #define LCD_DATA6       PIN_B2 
.................... #define LCD_DATA7       PIN_B1   
....................  
.................... #define lcd_output_enable(x)   output_bit(LCD_ENABLE_PIN, x)   // Lenh dieu khien chan LCD_ENABLE_PIN. 
.................... #define lcd_enable_tris()   output_drive(LCD_ENABLE_PIN) 
....................  
.................... #define lcd_output_rs(x)   output_bit(LCD_RS_PIN, x)   // Lenh dieu khien chan LCD_RS_PIN. 
.................... #define lcd_rs_tris()      output_drive(LCD_RS_PIN) 
....................  
.................... #define lcd_output_rw(x)   output_bit(LCD_RW_PIN, x)   // Lenh dieu khien chan LCD_RW_PIN 
.................... #define lcd_rw_tris()      output_drive(LCD_RW_PIN) 
....................  
.................... #define lcd_line_one   0x00    // Dia chi RAM C.LCD cho hang thu 1. 
.................... #define lcd_line_two   0x40    // Dia chi RAM C.LCD cho hang thu 2. 
.................... #define lcd_line_three   0x14 
.................... #define lcd_line_four   0x54 
.................... #define LCD_TYPE 0x02           // Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines 
....................  
.................... // Dinh nghia cac hang so. 
.................... byte const LCD_INIT_STRING[4] = {0x28 | (LCD_TYPE << 2), 0x0C, 0x01, 0x06}; 
....................         // Cac byte nay can thiet de gui toi C.LCD, dung de khoi dong cau hinh hoat dong cho C.LCD. 
....................       // Byte 1: 0x20 | (LCD_TYPE << 2) - So bit du lieu giao tiep (DL), so dong hien thi (N), kieu ky tu (F). 
....................       //         0 0 1 DL N F x x (DL: Data Length, N: Number Line, F: Font). 
....................          // Truong hop 1: 0x20 - 4 bit / 1 dong / 5 x 7. 
....................          // Truong hop 2: 0x24 - 4 bit / 1 dong / 5 x 10. 
....................          // Truong hop 3: 0x28 - 4 bit / 2 dong / 5 x 7. 
....................       // Byte 2: 0x0C - Dieu khien hien thi (Bat hien thi, tat con tro, tat nhap nhay con tro). 
....................       //         0 0 0 0 1 D C B (D: Display, C: Cursor, B: Blink). 
....................       // Byte 3: 0x01 - Xoa hien thi va tra con tro ve dau dong. 
....................       // Byte 4: 0x06 - Dat che do dau vao (Che do tang dia chi, tat dich chuyen hien thi). 
....................       //         0 0 0 0 0 1 I/D S (I/D: Increment/Decrement, S: Shift). 
....................       // Byte 5: .... - Doi con tro / hien thi. 
....................       //         0 0 0 1 S/C R/L x x (S/C: Screen/Cursor, R/L: Right/Left). 
....................  
.................... // *************************************************** 
.................... void lcd_init(void)    // Ham dung de khoi dong C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte i; 
.................... // Dinh nghia ham. 
.................... output_drive(LCD_DATA4);   // Thiet lap chan port (Data) o che do ngo ra. 
*
02B0:  BSF    03.5
02B1:  BCF    06.4
.................... output_drive(LCD_DATA5); 
02B2:  BCF    06.3
.................... output_drive(LCD_DATA6); 
02B3:  BCF    06.2
.................... output_drive(LCD_DATA7); 
02B4:  BCF    06.1
....................  
.................... lcd_enable_tris();         // Thiet lap chan port (Control: EN, RS, RW) o che do ngo ra. 
02B5:  BCF    06.5
.................... lcd_rs_tris(); 
02B6:  BCF    06.7
.................... lcd_rw_tris(); 
02B7:  BCF    06.6
....................  
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
02B8:  BCF    03.5
02B9:  BCF    06.7
02BA:  BSF    03.5
02BB:  BCF    06.7
.................... lcd_output_rw(0);         // RW = 0 - Ghi thong tin vao C.LCD. 
02BC:  BCF    03.5
02BD:  BCF    06.6
02BE:  BSF    03.5
02BF:  BCF    06.6
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
02C0:  BCF    03.5
02C1:  BCF    06.5
02C2:  BSF    03.5
02C3:  BCF    06.5
02C4:  BCF    03.5
02C5:  CLRF   2B
02C6:  BTFSC  0B.7
02C7:  BSF    2B.7
02C8:  BCF    0B.7
....................  
.................... delay_ms(15);   // Tao thoi gian tre 15ms (Thoi gian de LCD tu reset khi moi duoc cap nguon). 
02C9:  MOVLW  0F
02CA:  MOVWF  50
02CB:  CALL   07D
02CC:  BTFSC  2B.7
02CD:  BSF    0B.7
....................  
.................... for(i=1;i<=3;i++)         // Doan lenh khoi dong C.LCD o che do 8 bit duoc thuc hien 3 lan lien tiep 
02CE:  MOVLW  01
02CF:  MOVWF  41
02D0:  MOVF   41,W
02D1:  SUBLW  03
02D2:  BTFSS  03.0
02D3:  GOTO   2E2
....................    {                  // tai thoi diem ban dau (de dam bao cho C.LCD hoat dong on dinh trong  
....................    lcd_send_nibble(0x03);    // truong hop khi cung cap nguon cho C.LCD ma dien ap nguon tang len cham). 
02D4:  MOVLW  03
02D5:  MOVWF  4C
02D6:  CALL   119
02D7:  CLRF   2B
02D8:  BTFSC  0B.7
02D9:  BSF    2B.7
02DA:  BCF    0B.7
....................    delay_ms(5);         // RS = 0, RW = 0, D7 - D4 = 0011 (0x03) -> DL = 1 (8 bit). 
02DB:  MOVLW  05
02DC:  MOVWF  50
02DD:  CALL   07D
02DE:  BTFSC  2B.7
02DF:  BSF    0B.7
02E0:  INCF   41,F
02E1:  GOTO   2D0
....................    }                  // Do co BF (Busy Flag) chua kiem tra duoc trong thoi diem nay, nen phai  
....................                      // thuc hien 3 lan (xem luu do khoi dong C.LCD cua nha san xuat). 
....................  
.................... lcd_send_nibble(0x02);      // Doan lenh khoi dong C.LCD o che do 4 bit. Tu luc nay thi 4 bit cao duoc ghi 
02E2:  MOVLW  02
02E3:  MOVWF  4C
02E4:  CALL   119
....................                      // ra truoc tien, sau do la 4 bit thap. 
....................                      // RS = 0, RW = 0, D7 - D4 = 0010 (0x02) -> DL = 0 (4 bit). 
....................                      // Co BF (Busy Flag) co the bat dau kiem tra duoc tu luc nay. 
....................  
.................... for(i=0;i<=3;i++) 
02E5:  CLRF   41
02E6:  MOVF   41,W
02E7:  SUBLW  03
02E8:  BTFSS  03.0
02E9:  GOTO   2F3
....................    lcd_send_byte(0,LCD_INIT_STRING[i]);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
02EA:  MOVF   41,W
02EB:  CALL   04F
02EC:  MOVWF  42
02ED:  CLRF   49
02EE:  MOVF   42,W
02EF:  MOVWF  4A
02F0:  CALL   179
02F1:  INCF   41,F
02F2:  GOTO   2E6
.................... }                                 // Lenh: Thiet lap cau hinh hoat dong cho C.LCD. 
....................  
.................... // *************************************************** 
.................... byte lcd_read_byte(void)   // Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... byte low,high; 
.................... // Dinh nghia ham. 
.................... output_float(LCD_DATA4);   // Thiet lap chan port o che do ngo vao. 
*
0182:  BSF    06.4
.................... output_float(LCD_DATA5); 
0183:  BSF    06.3
.................... output_float(LCD_DATA6); 
0184:  BSF    06.2
.................... output_float(LCD_DATA7); 
0185:  BSF    06.1
....................  
.................... lcd_output_rw(1);         // RW = 1 - Doc thong tin tu C.LCD. 
0186:  BCF    03.5
0187:  BSF    06.6
0188:  BSF    03.5
0189:  BCF    06.6
....................                   // Tien hanh doc 4 bit cao cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
018A:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
018B:  BCF    03.5
018C:  BSF    06.5
018D:  BSF    03.5
018E:  BCF    06.5
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
018F:  NOP
.................... high = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit cao). 
0190:  BCF    03.5
0191:  CALL   148
0192:  MOVF   78,W
0193:  MOVWF  4C
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
0194:  BCF    06.5
0195:  BSF    03.5
0196:  BCF    06.5
....................                   // Tien hanh doc 4 bit thap cua thong tin tu C.LCD. 
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0197:  NOP
.................... lcd_output_enable(1);      // EN = 1 - Cho phep truy xuat C.LCD. 
0198:  BCF    03.5
0199:  BSF    06.5
019A:  BSF    03.5
019B:  BCF    06.5
.................... delay_cycles(1);         // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
019C:  NOP
.................... low = lcd_read_nibble();   // Cat tam 4 bit du lieu (4 bit thap). 
019D:  BCF    03.5
019E:  CALL   148
019F:  MOVF   78,W
01A0:  MOVWF  4B
.................... lcd_output_enable(0);      // EN = 0 - Cam truy xuat C.LCD. 
01A1:  BCF    06.5
01A2:  BSF    03.5
01A3:  BCF    06.5
....................  
.................... output_drive(LCD_DATA4);   // Thiet lap chan port o che do ngo ra. 
01A4:  BCF    06.4
.................... output_drive(LCD_DATA5); 
01A5:  BCF    06.3
.................... output_drive(LCD_DATA6); 
01A6:  BCF    06.2
.................... output_drive(LCD_DATA7); 
01A7:  BCF    06.1
....................  
.................... return((high<<4) | low);   // Tra ve ket qua du lieu (dang 8 bit). 
01A8:  BCF    03.5
01A9:  SWAPF  4C,W
01AA:  MOVWF  77
01AB:  MOVLW  F0
01AC:  ANDWF  77,F
01AD:  MOVF   77,W
01AE:  IORWF  4B,W
01AF:  MOVWF  78
.................... } 
....................  
.................... // *************************************************** 
.................... byte lcd_read_nibble(void)   // Ham doc thong tin (dang 4 bit / nibble) tu C.LCD. 
*
0148:  CLRF   4D
.................... { 
.................... // Khai bao bien. 
.................... byte n = 0x00;   // Mac dinh gia tri ban dau cho noi chua se thong tin. 
.................... // Dinh nghia ham. 
.................... n |= input(LCD_DATA4);         // Doc lan luot cac bit tu bus du lieu. 
0149:  BSF    03.5
014A:  BSF    06.4
014B:  MOVLW  00
014C:  BCF    03.5
014D:  BTFSC  06.4
014E:  MOVLW  01
014F:  IORWF  4D,F
.................... n |= input(LCD_DATA5) << 1; 
0150:  BSF    03.5
0151:  BSF    06.3
0152:  MOVLW  00
0153:  BCF    03.5
0154:  BTFSC  06.3
0155:  MOVLW  01
0156:  MOVWF  77
0157:  BCF    03.0
0158:  RLF    77,F
0159:  MOVF   77,W
015A:  IORWF  4D,F
.................... n |= input(LCD_DATA6) << 2; 
015B:  BSF    03.5
015C:  BSF    06.2
015D:  MOVLW  00
015E:  BCF    03.5
015F:  BTFSC  06.2
0160:  MOVLW  01
0161:  MOVWF  77
0162:  RLF    77,F
0163:  RLF    77,F
0164:  MOVLW  FC
0165:  ANDWF  77,F
0166:  MOVF   77,W
0167:  IORWF  4D,F
.................... n |= input(LCD_DATA7) << 3; 
0168:  BSF    03.5
0169:  BSF    06.1
016A:  MOVLW  00
016B:  BCF    03.5
016C:  BTFSC  06.1
016D:  MOVLW  01
016E:  MOVWF  77
016F:  RLF    77,F
0170:  RLF    77,F
0171:  RLF    77,F
0172:  MOVLW  F8
0173:  ANDWF  77,F
0174:  MOVF   77,W
0175:  IORWF  4D,F
....................  
.................... return(n);   // Tra ve ket qua doc duoc (data = 0000 xxxx). 
0176:  MOVF   4D,W
0177:  MOVWF  78
0178:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_byte(byte address, byte n)   // Ham gui thong tin (byte) toi C.LCD tai dia chi (address). 
.................... {                                 // address = 0: Lenh / 1: Du lieu. 
....................                                  // byte = Thong tin can gui (8 bit). 
.................... if(address>0x00+7) address=lcd_line_two;                              
0179:  MOVF   49,W
017A:  SUBLW  07
017B:  BTFSC  03.0
017C:  GOTO   17F
017D:  MOVLW  40
017E:  MOVWF  49
.................... // Khai bao bien. 
.................... // Dinh nghia ham.   
.................... lcd_output_rs(0);      // RS = 0 - Databus = Bus lenh. 
017F:  BCF    06.7
0180:  BSF    03.5
0181:  BCF    06.7
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
*
01B0:  MOVF   78,W
01B1:  MOVWF  4B
01B2:  BTFSS  4B.7
01B3:  GOTO   1B6
01B4:  BSF    03.5
01B5:  GOTO   182
.................... lcd_output_rs(address);   // RS = address - Databus = Bus lenh/du lieu. 
01B6:  MOVF   49,F
01B7:  BTFSS  03.2
01B8:  GOTO   1BB
01B9:  BCF    06.7
01BA:  GOTO   1BC
01BB:  BSF    06.7
01BC:  BSF    03.5
01BD:  BCF    06.7
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
01BE:  NOP
.................... lcd_output_rw(0);      // RW = 0 - Ghi thong tin vao C.LCD. 
01BF:  BCF    03.5
01C0:  BCF    06.6
01C1:  BSF    03.5
01C2:  BCF    06.6
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
01C3:  NOP
.................... lcd_output_enable(0);   // EN = 0 - Cam truy xuat C.LCD. 
01C4:  BCF    03.5
01C5:  BCF    06.5
01C6:  BSF    03.5
01C7:  BCF    06.5
.................... lcd_send_nibble(n >> 4);   // Goi ham truyen 4 bit cao sang C.LCD. 
01C8:  BCF    03.5
01C9:  SWAPF  4A,W
01CA:  MOVWF  4B
01CB:  MOVLW  0F
01CC:  ANDWF  4B,F
01CD:  MOVF   4B,W
01CE:  MOVWF  4C
01CF:  CALL   119
.................... lcd_send_nibble(n & 0x0F);   // Goi ham truyen 4 bit thap sang C.LCD. 
01D0:  MOVF   4A,W
01D1:  ANDLW  0F
01D2:  MOVWF  4B
01D3:  MOVWF  4C
01D4:  CALL   119
01D5:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_send_nibble(byte n)   // Ham gui thong tin (dang 4 bit / nibble) sang C.LCD. 
.................... {                        // n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap. 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... output_bit(LCD_DATA4, bit_test(n, 0));   // Xuat lan luot cac bit len bus du lieu. 
*
0119:  BTFSC  4C.0
011A:  GOTO   11D
011B:  BCF    06.4
011C:  GOTO   11E
011D:  BSF    06.4
011E:  BSF    03.5
011F:  BCF    06.4
.................... output_bit(LCD_DATA5, bit_test(n, 1)); 
0120:  BCF    03.5
0121:  BTFSC  4C.1
0122:  GOTO   125
0123:  BCF    06.3
0124:  GOTO   126
0125:  BSF    06.3
0126:  BSF    03.5
0127:  BCF    06.3
.................... output_bit(LCD_DATA6, bit_test(n, 2)); 
0128:  BCF    03.5
0129:  BTFSC  4C.2
012A:  GOTO   12D
012B:  BCF    06.2
012C:  GOTO   12E
012D:  BSF    06.2
012E:  BSF    03.5
012F:  BCF    06.2
.................... output_bit(LCD_DATA7, bit_test(n, 3)); 
0130:  BCF    03.5
0131:  BTFSC  4C.3
0132:  GOTO   135
0133:  BCF    06.1
0134:  GOTO   136
0135:  BSF    06.1
0136:  BSF    03.5
0137:  BCF    06.1
....................      
.................... delay_cycles(1);      // Tao tre 1 chu ky (t=1us voi fosc=4MHz). 
0138:  NOP
.................... lcd_output_enable(1);   // Tao xung ghi thong tin vao C.LCD. 
0139:  BCF    03.5
013A:  BSF    06.5
013B:  BSF    03.5
013C:  BCF    06.5
.................... delay_us(2);         // Tao tre 2 chu ky (t=2us voi fosc=4MHz). 
013D:  MOVLW  02
013E:  MOVWF  77
013F:  DECFSZ 77,F
0140:  GOTO   13F
0141:  NOP
.................... lcd_output_enable(0);   // Tao xung ghi thong tin vao LCD - EN = 1->0 (High to Low). 
0142:  BCF    03.5
0143:  BCF    06.5
0144:  BSF    03.5
0145:  BCF    06.5
0146:  BCF    03.5
0147:  RETURN
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_gotoxy(byte x, byte y)   // Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1). 
.................... { 
.................... // Khai bao bien. 
.................... byte address; 
.................... // Dinh nghia ham.   
.................... if(y==1)               // Kiem tra vi tri truy xuat thuoc hang 2. 
*
01D6:  DECFSZ 46,W
01D7:  GOTO   1DA
....................    address=lcd_line_one;      // Nap dia chi RAM cua hang 2.  
01D8:  CLRF   47
01D9:  GOTO   1EE
.................... else if(y==2)      // Neu vi tri truy xuat thuoc hang 1. 
01DA:  MOVF   46,W
01DB:  SUBLW  02
01DC:  BTFSS  03.2
01DD:  GOTO   1E1
....................    address=lcd_line_two;      // Nap dia chi RAM cua hang 1. 
01DE:  MOVLW  40
01DF:  MOVWF  47
01E0:  GOTO   1EE
.................... else if(y==3) 
01E1:  MOVF   46,W
01E2:  SUBLW  03
01E3:  BTFSS  03.2
01E4:  GOTO   1E8
....................    address=lcd_line_three;      
01E5:  MOVLW  14
01E6:  MOVWF  47
01E7:  GOTO   1EE
.................... else if(y==4) 
01E8:  MOVF   46,W
01E9:  SUBLW  04
01EA:  BTFSS  03.2
01EB:  GOTO   1EE
....................    address=lcd_line_four;    
01EC:  MOVLW  54
01ED:  MOVWF  47
....................  
.................... address+=x-1; // Ghep dia chi cot vao dia chi tong quat (address). address = address + (x-1). 
01EE:  MOVLW  01
01EF:  SUBWF  45,W
01F0:  ADDWF  47,F
....................                         // Ta qui uoc: Goc tren ben trai co toa do la 1,1 -> Cot dau tien la Cot 1 
....................                         // (x-1) vi C.LCD qui uoc cot dau tien co dia chi la 0. 
.................... lcd_send_byte(0,0x80|address);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
01F1:  MOVF   47,W
01F2:  IORLW  80
01F3:  MOVWF  48
01F4:  CLRF   49
01F5:  MOVF   48,W
01F6:  MOVWF  4A
01F7:  CALL   179
01F8:  RETURN
.................... }                        // Lenh: Thiet lap dia chi DDRAM cua C.LCD (addresss).    
....................  
.................... // *************************************************** 
.................... char lcd_getc(byte x, byte y)   // Ham tra ve ky tu tai vi tri (x,y) tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
.................... char value; 
.................... // Dinh nghia ham.   
.................... lcd_gotoxy(x,y);            // Xac dinh toa do C.LCD can truy xuat. 
.................... while(bit_test(lcd_read_byte(),7));   // Cho Busy Flag = 0 (C.LCD da xu ly xong). 
.................... lcd_output_rs(1);         // RS = 1 - Databus = Bus du lieu. 
.................... value = lcd_read_byte();   // Doc ve tu C.LCD. 
.................... lcd_output_rs(0);         // RS = 0 - Databus = Bus lenh. 
....................  
.................... return(value);      // Tra ve ma ky tu tai toa do yeu cau. 
.................... } 
....................  
.................... // *************************************************** 
.................... void lcd_putc(char c)   // Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
.................... { 
.................... // Khai bao bien. 
....................  
.................... // Dinh nghia ham.  
.................... switch (c) 
01F9:  MOVF   44,W
01FA:  XORLW  0C
01FB:  BTFSC  03.2
01FC:  GOTO   204
01FD:  XORLW  06
01FE:  BTFSC  03.2
01FF:  GOTO   212
0200:  XORLW  02
0201:  BTFSC  03.2
0202:  GOTO   218
0203:  GOTO   21D
....................    { 
....................    case '\f':     // Chuc nang xoa hien thi. 
....................       lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
0204:  CLRF   49
0205:  MOVLW  01
0206:  MOVWF  4A
0207:  CALL   179
0208:  CLRF   2B
0209:  BTFSC  0B.7
020A:  BSF    2B.7
020B:  BCF    0B.7
....................       delay_ms(2);         // Lenh: Xoa hien thi tren man hinh C.LCD (0x01). 
020C:  MOVLW  02
020D:  MOVWF  50
020E:  CALL   07D
020F:  BTFSC  2B.7
0210:  BSF    0B.7
....................       break; 
0211:  GOTO   222
....................    case '\n':       // Chuc nang bat dau hang thu 2. 
....................       lcd_gotoxy(1,0x02);     // Goi ham truyen thong tin (du lieu) sang C.LCD.    
0212:  MOVLW  01
0213:  MOVWF  45
0214:  MOVLW  02
0215:  MOVWF  46
0216:  CALL   1D6
....................       break; 
0217:  GOTO   222
....................     case '\b':       // Chuc nang lui ve 1 vi tri. 
....................       lcd_send_byte(0,0x10);    // Goi ham truyen thong tin (lenh) sang C.LCD.  
0218:  CLRF   49
0219:  MOVLW  10
021A:  MOVWF  4A
021B:  CALL   179
....................       break;               // Lenh: Doi con tro sang trai (0x10). 
021C:  GOTO   222
....................    default:       // Chuc nang hien thi ky tu c tai vi tri ke tiep tren C.LCD. 
....................       lcd_send_byte(1,c);     // Goi ham truyen thong tin (du lieu) sang C.LCD. 
021D:  MOVLW  01
021E:  MOVWF  49
021F:  MOVF   44,W
0220:  MOVWF  4A
0221:  CALL   179
....................       break; 
....................    } 
0222:  RETURN
.................... }       
.................... void lcd_clear(void) 
.................... { 
....................    lcd_send_byte(0,0x01);   // Goi ham truyen thong tin (lenh) sang C.LCD. 
....................    delay_ms(2);    
.................... } 
.................... void lcd_puts(char *str) 
.................... { 
....................    while(*str!=NULL) 
....................    { 
....................       lcd_putc(*str); 
....................       str++; 
....................    } 
.................... } 
.................... // ***************************************************    
....................  
.................... #include <Keypad.h> 
.................... #define KEYPAD_H 
....................  
.................... //khai bao cac cot 
.................... #define COT_1  PIN_D4 
.................... #define COT_2  PIN_D5 
.................... #define COT_3  PIN_D6 
.................... #define COT_4  PIN_D7 
....................  
.................... //khai bao cac hang 
.................... #define HANG_1  input(PIN_C7) 
.................... #define HANG_2  input(PIN_C6) 
.................... #define HANG_3  input(PIN_C5)  
.................... #define HANG_4  input(PIN_C4) 
....................  
.................... void _DieuKhienCot(char TenCot, int1 TrangThai); 
.................... void _KhoiDongBanPhim(void); 
.................... char _QuetPhimNhan(void); 
....................  
.................... void _DieuKhienCot(char TenCot, int1 TrangThai) 
.................... { 
....................    switch(TenCot) 
*
0279:  MOVLW  01
027A:  SUBWF  44,W
027B:  ADDLW  FC
027C:  BTFSC  03.0
027D:  GOTO   2A7
027E:  ADDLW  04
027F:  GOTO   2A8
....................    { 
....................       case 1: 
....................       { 
....................          output_bit(COT_1,TrangThai); 
0280:  MOVF   45,F
0281:  BTFSS  03.2
0282:  GOTO   285
0283:  BCF    08.4
0284:  GOTO   286
0285:  BSF    08.4
0286:  BSF    03.5
0287:  BCF    08.4
....................          break; 
0288:  BCF    03.5
0289:  GOTO   2A7
....................       } 
....................       case 2: 
....................       { 
....................          output_bit(COT_2,TrangThai); 
028A:  MOVF   45,F
028B:  BTFSS  03.2
028C:  GOTO   28F
028D:  BCF    08.5
028E:  GOTO   290
028F:  BSF    08.5
0290:  BSF    03.5
0291:  BCF    08.5
....................          break; 
0292:  BCF    03.5
0293:  GOTO   2A7
....................       } 
....................       case 3: 
....................       { 
....................          output_bit(COT_3,TrangThai); 
0294:  MOVF   45,F
0295:  BTFSS  03.2
0296:  GOTO   299
0297:  BCF    08.6
0298:  GOTO   29A
0299:  BSF    08.6
029A:  BSF    03.5
029B:  BCF    08.6
....................          break; 
029C:  BCF    03.5
029D:  GOTO   2A7
....................       } 
....................       case 4: 
....................       { 
....................          output_bit(COT_4,TrangThai); 
029E:  MOVF   45,F
029F:  BTFSS  03.2
02A0:  GOTO   2A3
02A1:  BCF    08.7
02A2:  GOTO   2A4
02A3:  BSF    08.7
02A4:  BSF    03.5
02A5:  BCF    08.7
....................          break; 
02A6:  BCF    03.5
....................       } 
....................    } 
02A7:  RETURN
.................... } 
....................  
.................... void _KhoiDongBanPhim(void) 
.................... { 
....................    char i; 
....................    for(i=1;i<=4;i++) 
*
0318:  MOVLW  01
0319:  MOVWF  41
031A:  MOVF   41,W
031B:  SUBLW  04
031C:  BTFSS  03.0
031D:  GOTO   325
....................    { 
....................       _DieuKhienCot(i,1); 
031E:  MOVF   41,W
031F:  MOVWF  44
0320:  MOVLW  01
0321:  MOVWF  45
0322:  CALL   279
0323:  INCF   41,F
0324:  GOTO   31A
....................    } 
.................... } 
....................  
.................... //!char ReadColStatus() 
.................... //!{ 
.................... //!    char ucData='p'; 
.................... //!    while('p' != ucData) 
.................... //!    { 
.................... //!        ucData = _QuetPhimNhan(); 
.................... //!    } 
.................... //!    return ucData; 
.................... //!} 
....................  
.................... char _QuetPhimNhan(void) 
*
033B:  MOVLW  FF
033C:  MOVWF  43
.................... { 
....................    signed char Key=-1; 
....................    const char PhimPhan[16]= 
....................    { 
....................       '1','4','7','*', 
....................       '2','5','8','0', 
....................       '3','6','9','e', 
....................       '\f','\b','d','u' 
....................    }; 
....................     
....................    //quet cot 1 
....................    _DieuKhienCot(1,0); //ban dau bat cot di 
033D:  MOVLW  01
033E:  MOVWF  44
033F:  CLRF   45
0340:  CALL   279
....................    // sau do quet cac hang 
....................    if(HANG_1==0)//Khi nhan phim  
0341:  BSF    2C.7
0342:  MOVF   2C,W
0343:  BSF    03.5
0344:  MOVWF  07
0345:  BCF    03.5
0346:  BTFSC  07.7
0347:  GOTO   352
....................    { 
....................       while(HANG_1==0); 
0348:  BSF    2C.7
0349:  MOVF   2C,W
034A:  BSF    03.5
034B:  MOVWF  07
034C:  BCF    03.5
034D:  BTFSS  07.7
034E:  GOTO   348
....................       Key=1; 
034F:  MOVLW  01
0350:  MOVWF  43
....................    } 
0351:  GOTO   384
....................    else if(HANG_2==0)//Khi nhan phim  
0352:  BSF    2C.6
0353:  MOVF   2C,W
0354:  BSF    03.5
0355:  MOVWF  07
0356:  BCF    03.5
0357:  BTFSC  07.6
0358:  GOTO   363
....................    { 
....................       while(HANG_2==0); 
0359:  BSF    2C.6
035A:  MOVF   2C,W
035B:  BSF    03.5
035C:  MOVWF  07
035D:  BCF    03.5
035E:  BTFSS  07.6
035F:  GOTO   359
....................       Key=2; 
0360:  MOVLW  02
0361:  MOVWF  43
....................    } 
0362:  GOTO   384
....................    else if(HANG_3==0)//Khi nhan phim  
0363:  BSF    2C.5
0364:  MOVF   2C,W
0365:  BSF    03.5
0366:  MOVWF  07
0367:  BCF    03.5
0368:  BTFSC  07.5
0369:  GOTO   374
....................    { 
....................       while(HANG_3==0); 
036A:  BSF    2C.5
036B:  MOVF   2C,W
036C:  BSF    03.5
036D:  MOVWF  07
036E:  BCF    03.5
036F:  BTFSS  07.5
0370:  GOTO   36A
....................       Key=3; 
0371:  MOVLW  03
0372:  MOVWF  43
....................    } 
0373:  GOTO   384
....................    else if(HANG_4==0)//Khi nhan phim  
0374:  BSF    2C.4
0375:  MOVF   2C,W
0376:  BSF    03.5
0377:  MOVWF  07
0378:  BCF    03.5
0379:  BTFSC  07.4
037A:  GOTO   384
....................    {   
....................       while(HANG_4==0); 
037B:  BSF    2C.4
037C:  MOVF   2C,W
037D:  BSF    03.5
037E:  MOVWF  07
037F:  BCF    03.5
0380:  BTFSS  07.4
0381:  GOTO   37B
....................       Key=4; 
0382:  MOVLW  04
0383:  MOVWF  43
....................    } 
....................    //tat cot 
....................    _DieuKhienCot(1,1); 
0384:  MOVLW  01
0385:  MOVWF  44
0386:  MOVWF  45
0387:  CALL   279
....................     
....................    //quet cot 2 
....................    _DieuKhienCot(2,0); //ban dau bat cot di 
0388:  MOVLW  02
0389:  MOVWF  44
038A:  CLRF   45
038B:  CALL   279
....................    // sau do quet cac hang 
....................    if(HANG_1==0)//Khi nhan phim  
038C:  BSF    2C.7
038D:  MOVF   2C,W
038E:  BSF    03.5
038F:  MOVWF  07
0390:  BCF    03.5
0391:  BTFSC  07.7
0392:  GOTO   39D
....................    { 
....................       while(HANG_1==0); 
0393:  BSF    2C.7
0394:  MOVF   2C,W
0395:  BSF    03.5
0396:  MOVWF  07
0397:  BCF    03.5
0398:  BTFSS  07.7
0399:  GOTO   393
....................       Key=5; 
039A:  MOVLW  05
039B:  MOVWF  43
....................    } 
039C:  GOTO   3CF
....................    else if(HANG_2==0)//Khi nhan phim  
039D:  BSF    2C.6
039E:  MOVF   2C,W
039F:  BSF    03.5
03A0:  MOVWF  07
03A1:  BCF    03.5
03A2:  BTFSC  07.6
03A3:  GOTO   3AE
....................    { 
....................       while(HANG_2==0); 
03A4:  BSF    2C.6
03A5:  MOVF   2C,W
03A6:  BSF    03.5
03A7:  MOVWF  07
03A8:  BCF    03.5
03A9:  BTFSS  07.6
03AA:  GOTO   3A4
....................       Key=6; 
03AB:  MOVLW  06
03AC:  MOVWF  43
....................    } 
03AD:  GOTO   3CF
....................    else if(HANG_3==0)//Khi nhan phim  
03AE:  BSF    2C.5
03AF:  MOVF   2C,W
03B0:  BSF    03.5
03B1:  MOVWF  07
03B2:  BCF    03.5
03B3:  BTFSC  07.5
03B4:  GOTO   3BF
....................    { 
....................       while(HANG_3==0); 
03B5:  BSF    2C.5
03B6:  MOVF   2C,W
03B7:  BSF    03.5
03B8:  MOVWF  07
03B9:  BCF    03.5
03BA:  BTFSS  07.5
03BB:  GOTO   3B5
....................       Key=7; 
03BC:  MOVLW  07
03BD:  MOVWF  43
....................    } 
03BE:  GOTO   3CF
....................    else if(HANG_4==0)//Khi nhan phim  
03BF:  BSF    2C.4
03C0:  MOVF   2C,W
03C1:  BSF    03.5
03C2:  MOVWF  07
03C3:  BCF    03.5
03C4:  BTFSC  07.4
03C5:  GOTO   3CF
....................    { 
....................       while(HANG_4==0); 
03C6:  BSF    2C.4
03C7:  MOVF   2C,W
03C8:  BSF    03.5
03C9:  MOVWF  07
03CA:  BCF    03.5
03CB:  BTFSS  07.4
03CC:  GOTO   3C6
....................       Key=8; 
03CD:  MOVLW  08
03CE:  MOVWF  43
....................    } 
....................    //tat cot 
....................    _DieuKhienCot(2,1); 
03CF:  MOVLW  02
03D0:  MOVWF  44
03D1:  MOVLW  01
03D2:  MOVWF  45
03D3:  CALL   279
....................     
....................    //quet cot 3 
....................    _DieuKhienCot(3,0); //ban dau bat cot di 
03D4:  MOVLW  03
03D5:  MOVWF  44
03D6:  CLRF   45
03D7:  CALL   279
....................    // sau do quet cac hang 
....................    if(HANG_1==0)//Khi nhan phim  
03D8:  BSF    2C.7
03D9:  MOVF   2C,W
03DA:  BSF    03.5
03DB:  MOVWF  07
03DC:  BCF    03.5
03DD:  BTFSC  07.7
03DE:  GOTO   3E9
....................    { 
....................       while(HANG_1==0); 
03DF:  BSF    2C.7
03E0:  MOVF   2C,W
03E1:  BSF    03.5
03E2:  MOVWF  07
03E3:  BCF    03.5
03E4:  BTFSS  07.7
03E5:  GOTO   3DF
....................       Key=9; 
03E6:  MOVLW  09
03E7:  MOVWF  43
....................    } 
03E8:  GOTO   41B
....................    else if(HANG_2==0)//Khi nhan phim  
03E9:  BSF    2C.6
03EA:  MOVF   2C,W
03EB:  BSF    03.5
03EC:  MOVWF  07
03ED:  BCF    03.5
03EE:  BTFSC  07.6
03EF:  GOTO   3FA
....................    { 
....................       while(HANG_2==0); 
03F0:  BSF    2C.6
03F1:  MOVF   2C,W
03F2:  BSF    03.5
03F3:  MOVWF  07
03F4:  BCF    03.5
03F5:  BTFSS  07.6
03F6:  GOTO   3F0
....................       Key=10; 
03F7:  MOVLW  0A
03F8:  MOVWF  43
....................    } 
03F9:  GOTO   41B
....................    else if(HANG_3==0)//Khi nhan phim  
03FA:  BSF    2C.5
03FB:  MOVF   2C,W
03FC:  BSF    03.5
03FD:  MOVWF  07
03FE:  BCF    03.5
03FF:  BTFSC  07.5
0400:  GOTO   40B
....................    { 
....................       while(HANG_3==0); 
0401:  BSF    2C.5
0402:  MOVF   2C,W
0403:  BSF    03.5
0404:  MOVWF  07
0405:  BCF    03.5
0406:  BTFSS  07.5
0407:  GOTO   401
....................       Key=11; 
0408:  MOVLW  0B
0409:  MOVWF  43
....................    } 
040A:  GOTO   41B
....................    else if(HANG_4==0)//Khi nhan phim  
040B:  BSF    2C.4
040C:  MOVF   2C,W
040D:  BSF    03.5
040E:  MOVWF  07
040F:  BCF    03.5
0410:  BTFSC  07.4
0411:  GOTO   41B
....................    { 
....................       while(HANG_4==0); 
0412:  BSF    2C.4
0413:  MOVF   2C,W
0414:  BSF    03.5
0415:  MOVWF  07
0416:  BCF    03.5
0417:  BTFSS  07.4
0418:  GOTO   412
....................       Key=12; 
0419:  MOVLW  0C
041A:  MOVWF  43
....................    } 
....................    //tat cot 
....................    _DieuKhienCot(3,1); 
041B:  MOVLW  03
041C:  MOVWF  44
041D:  MOVLW  01
041E:  MOVWF  45
041F:  CALL   279
....................     
....................    //quet cot 4 
....................    _DieuKhienCot(4,0); //ban dau bat cot di 
0420:  MOVLW  04
0421:  MOVWF  44
0422:  CLRF   45
0423:  CALL   279
....................    // sau do quet cac hang 
....................    if(HANG_1==0)//Khi nhan phim  
0424:  BSF    2C.7
0425:  MOVF   2C,W
0426:  BSF    03.5
0427:  MOVWF  07
0428:  BCF    03.5
0429:  BTFSC  07.7
042A:  GOTO   435
....................    { 
....................       while(HANG_1==0); 
042B:  BSF    2C.7
042C:  MOVF   2C,W
042D:  BSF    03.5
042E:  MOVWF  07
042F:  BCF    03.5
0430:  BTFSS  07.7
0431:  GOTO   42B
....................       Key=13; 
0432:  MOVLW  0D
0433:  MOVWF  43
....................    } 
0434:  GOTO   467
....................    else if(HANG_2==0)//Khi nhan phim  
0435:  BSF    2C.6
0436:  MOVF   2C,W
0437:  BSF    03.5
0438:  MOVWF  07
0439:  BCF    03.5
043A:  BTFSC  07.6
043B:  GOTO   446
....................    { 
....................       while(HANG_2==0); 
043C:  BSF    2C.6
043D:  MOVF   2C,W
043E:  BSF    03.5
043F:  MOVWF  07
0440:  BCF    03.5
0441:  BTFSS  07.6
0442:  GOTO   43C
....................       Key=14; 
0443:  MOVLW  0E
0444:  MOVWF  43
....................    } 
0445:  GOTO   467
....................    else if(HANG_3==0)//Khi nhan phim  
0446:  BSF    2C.5
0447:  MOVF   2C,W
0448:  BSF    03.5
0449:  MOVWF  07
044A:  BCF    03.5
044B:  BTFSC  07.5
044C:  GOTO   457
....................    { 
....................       while(HANG_3==0); 
044D:  BSF    2C.5
044E:  MOVF   2C,W
044F:  BSF    03.5
0450:  MOVWF  07
0451:  BCF    03.5
0452:  BTFSS  07.5
0453:  GOTO   44D
....................       Key=15; 
0454:  MOVLW  0F
0455:  MOVWF  43
....................    } 
0456:  GOTO   467
....................    else if(HANG_4==0)//Khi nhan phim  
0457:  BSF    2C.4
0458:  MOVF   2C,W
0459:  BSF    03.5
045A:  MOVWF  07
045B:  BCF    03.5
045C:  BTFSC  07.4
045D:  GOTO   467
....................    { 
....................       while(HANG_4==0); 
045E:  BSF    2C.4
045F:  MOVF   2C,W
0460:  BSF    03.5
0461:  MOVWF  07
0462:  BCF    03.5
0463:  BTFSS  07.4
0464:  GOTO   45E
....................       Key=16; 
0465:  MOVLW  10
0466:  MOVWF  43
....................    } 
....................    //tat cot 
....................    _DieuKhienCot(4,1); 
0467:  MOVLW  04
0468:  MOVWF  44
0469:  MOVLW  01
046A:  MOVWF  45
046B:  CALL   279
....................     
....................    if(Key==-1) return -1; 
046C:  MOVF   43,W
046D:  SUBLW  FF
046E:  BTFSS  03.2
046F:  GOTO   473
0470:  MOVLW  FF
0471:  MOVWF  78
0472:  GOTO   478
....................    return PhimPhan[Key-1]; 
0473:  MOVLW  01
0474:  SUBWF  43,W
0475:  CALL   057
0476:  MOVWF  78
0477:  MOVWF  78
0478:  RETURN
.................... } 
....................  
....................  
....................  
....................  
.................... #define Lock(x) output_bit(PIN_C3,x) 
.................... #define Buzzer(x) output_bit(PIN_C2,x) 
.................... #define LED_Green(x) output_bit(PIN_C0,x) 
.................... #define LED_Red(x) output_bit(PIN_C1,x) 
.................... #define size_pass 4 
....................  
.................... //int size_pass=4; //Set size pass =4 
.................... signed char key=-1; // Variable to hold value of key press 
.................... int index_pointer,lcd_pointer; 
.................... int Check_count; 
.................... int Check_flag,Change_flag; 
.................... char InputPass[size_pass]=""; 
*
080E:  BCF    03.5
080F:  CLRF   33
.................... // char pass[size_pass]={'1','2','3','4'}; 
.................... char pass[size_pass]={}; 
0810:  CLRF   37
0811:  CLRF   38
0812:  CLRF   39
0813:  CLRF   3A
.................... int pass_flag; 
....................  
.................... void init_screen(); 
.................... void init_variable(); 
.................... void Init_system(); 
.................... void menu_TypingPass(); 
.................... void menu_ChangePass(); 
.................... void TypingPass(); 
.................... void CheckPass(char *Check); 
.................... void CorrectPassword(); 
.................... void IncorrectPassword(); 
.................... void ChangePass(); 
.................... void device_Unlock(); 
.................... void device_Lock(); 
.................... void device_Alert(); 
.................... void device_Alert_Stop(); 
....................  
.................... void eeprom_write_string(unsigned int8 addr,unsigned char*str) 
.................... { 
....................   while(*str) 
*
05AC:  MOVF   43,W
05AD:  MOVWF  7A
05AE:  MOVF   42,W
05AF:  MOVWF  04
05B0:  BCF    03.7
05B1:  BTFSC  7A.0
05B2:  BSF    03.7
05B3:  MOVF   00,F
05B4:  BTFSC  03.2
05B5:  GOTO   5DD
....................   { 
....................   write_eeprom(addr,*str); 
05B6:  MOVF   43,W
05B7:  MOVWF  7A
05B8:  MOVF   42,W
05B9:  MOVWF  04
05BA:  BCF    03.7
05BB:  BTFSC  43.0
05BC:  BSF    03.7
05BD:  MOVF   00,W
05BE:  MOVWF  44
05BF:  MOVF   0B,W
05C0:  MOVWF  77
05C1:  BCF    0B.7
05C2:  MOVF   41,W
05C3:  BSF    03.6
05C4:  MOVWF  0D
05C5:  BCF    03.6
05C6:  MOVF   44,W
05C7:  BSF    03.6
05C8:  MOVWF  0C
05C9:  BSF    03.5
05CA:  BCF    0C.7
05CB:  BSF    0C.2
05CC:  MOVLW  55
05CD:  MOVWF  0D
05CE:  MOVLW  AA
05CF:  MOVWF  0D
05D0:  BSF    0C.1
05D1:  BTFSC  0C.1
05D2:  GOTO   5D1
05D3:  BCF    0C.2
05D4:  MOVF   77,W
05D5:  BCF    03.5
05D6:  BCF    03.6
05D7:  IORWF  0B,F
....................   addr++; 
05D8:  INCF   41,F
....................   str++; 
05D9:  INCF   42,F
05DA:  BTFSC  03.2
05DB:  INCF   43,F
05DC:  GOTO   5AC
....................   } 
.................... } 
.................... void eeprom_read_string(unsigned int8 addr, unsigned char* str,unsigned int8 len) 
.................... { 
....................   unsigned int8 i; 
....................   for(i=0;i<len;i++) 
*
0646:  CLRF   40
0647:  MOVF   3F,W
0648:  SUBWF  40,W
0649:  BTFSC  03.0
064A:  GOTO   660
....................   { 
....................       str[i]=read_eeprom(addr+i); 
064B:  MOVF   40,W
064C:  ADDWF  3D,W
064D:  MOVWF  04
064E:  BCF    03.7
064F:  BTFSC  3E.0
0650:  BSF    03.7
0651:  MOVF   40,W
0652:  ADDWF  3C,W
0653:  MOVWF  43
0654:  MOVF   43,W
0655:  BSF    03.6
0656:  MOVWF  0D
0657:  BSF    03.5
0658:  BCF    0C.7
0659:  BSF    0C.0
065A:  BCF    03.5
065B:  MOVF   0C,W
065C:  MOVWF  00
065D:  BCF    03.6
065E:  INCF   40,F
065F:  GOTO   647
....................   } 
....................   str[len]=0; 
0660:  MOVF   3F,W
0661:  ADDWF  3D,W
0662:  MOVWF  04
0663:  BCF    03.7
0664:  BTFSC  3E.0
0665:  BSF    03.7
0666:  CLRF   00
0667:  BSF    0A.3
0668:  BCF    0A.4
0669:  GOTO   06C (RETURN)
.................... } 
.................... #INT_EXT 
.................... void EXT_isr(void) 
.................... { 
....................    device_Unlock(); 
*
009F:  CALL   070
....................    delay_ms(5000); 
00A0:  MOVLW  14
00A1:  MOVWF  4F
00A2:  MOVLW  FA
00A3:  MOVWF  50
00A4:  CALL   07D
00A5:  DECFSZ 4F,F
00A6:  GOTO   0A2
....................    device_Lock(); 
00A7:  CALL   092
00A8:  BCF    0B.1
00A9:  BCF    0A.3
00AA:  BCF    0A.4
00AB:  GOTO   02B
.................... } 
....................  
.................... void main() 
*
0800:  MOVF   03,W
0801:  ANDLW  1F
0802:  MOVWF  03
0803:  MOVLW  FF
0804:  MOVWF  2C
0805:  MOVWF  2D
0806:  BSF    03.5
0807:  BSF    1F.0
0808:  BSF    1F.1
0809:  BSF    1F.2
080A:  BCF    1F.3
080B:  MOVLW  07
080C:  MOVWF  1C
080D:  BCF    03.7
.................... { 
.................... Init_system(); 
*
0814:  BCF    0A.3
0815:  CALL   2B0
0816:  BSF    0A.3
.................... set_tris_B(0x01); //(output =0) - (input=1)  ? 
0817:  MOVLW  01
0818:  BSF    03.5
0819:  MOVWF  06
.................... set_tris_C(0x0F);                      //    ? 
081A:  MOVLW  0F
081B:  MOVWF  07
081C:  BCF    03.5
081D:  MOVWF  2C
.................... enable_interrupts(INT_EXT);            //    ? 
081E:  BSF    0B.4
.................... enable_interrupts(GLOBAL);             //    ? 
081F:  MOVLW  C0
0820:  IORWF  0B,F
....................  
.................... pass_flag=read_eeprom(0x00); 
0821:  BSF    03.6
0822:  CLRF   0D
0823:  BSF    03.5
0824:  BCF    0C.7
0825:  BSF    0C.0
0826:  BCF    03.5
0827:  MOVF   0C,W
0828:  BCF    03.6
0829:  MOVWF  3B
082A:  CLRF   2B
082B:  BTFSC  0B.7
082C:  BSF    2B.7
082D:  BCF    0B.7
.................... delay_ms(2); 
082E:  MOVLW  02
082F:  MOVWF  50
0830:  BCF    0A.3
0831:  CALL   07D
0832:  BSF    0A.3
0833:  BTFSC  2B.7
0834:  BSF    0B.7
....................  
.................... //--- Kiem tra Pass duoc set chua ---// 
.................... if(pass_flag==-1){ 
0835:  MOVF   3B,W
0836:  SUBLW  FF
0837:  BTFSS  03.2
0838:  GOTO   063
....................    LED_Green(1); 
0839:  BSF    07.0
083A:  BCF    2C.0
083B:  MOVF   2C,W
083C:  BSF    03.5
083D:  MOVWF  07
....................    ChangePass(); 
083E:  BCF    0A.3
083F:  BCF    03.5
0840:  CALL   4F9
0841:  BSF    0A.3
....................    write_eeprom(0x00,1); 
0842:  MOVF   0B,W
0843:  MOVWF  77
0844:  BCF    0B.7
0845:  BSF    03.6
0846:  CLRF   0D
0847:  MOVLW  01
0848:  MOVWF  0C
0849:  BSF    03.5
084A:  BCF    0C.7
084B:  BSF    0C.2
084C:  MOVLW  55
084D:  MOVWF  0D
084E:  MOVLW  AA
084F:  MOVWF  0D
0850:  BSF    0C.1
0851:  BTFSC  0C.1
0852:  GOTO   051
0853:  BCF    0C.2
0854:  MOVF   77,W
0855:  BCF    03.5
0856:  BCF    03.6
0857:  IORWF  0B,F
0858:  CLRF   2B
0859:  BTFSC  0B.7
085A:  BSF    2B.7
085B:  BCF    0B.7
....................    delay_ms(2); 
085C:  MOVLW  02
085D:  MOVWF  50
085E:  BCF    0A.3
085F:  CALL   07D
0860:  BSF    0A.3
0861:  BTFSC  2B.7
0862:  BSF    0B.7
.................... } 
.................... //--- Kiem tra Pass duoc set chua ---// 
....................  
.................... //-----------------------CLEAR EEPROM------------// 
.................... // char test_clear[8]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}; 
.................... // eeprom_write_string(0x00,test_clear); 
.................... // delay_ms(2); 
.................... // eeprom_write_string(0x08,test_clear); 
.................... // delay_ms(2); 
.................... // eeprom_write_string(0x10,test_clear); 
.................... // delay_ms(2); 
.................... // eeprom_write_string(0x18,test_clear); 
.................... // delay_ms(2); 
.................... // eeprom_write_string(0x20,test_clear); 
.................... // delay_ms(2); 
.................... // eeprom_write_string(0x28,test_clear); 
.................... // delay_ms(2); 
.................... // eeprom_write_string(0x30,test_clear); 
.................... // delay_ms(2); 
.................... // eeprom_write_string(0x38,test_clear); 
.................... // delay_ms(2); 
.................... //-----------------------CLEAR EEPROM------------// 
....................  
.................... eeprom_read_string(0x08,pass,size_pass); 
0863:  MOVLW  08
0864:  MOVWF  3C
0865:  CLRF   3E
0866:  MOVLW  37
0867:  MOVWF  3D
0868:  MOVLW  04
0869:  MOVWF  3F
086A:  BCF    0A.3
086B:  GOTO   646
086C:  BSF    0A.3
.................... // sprintf(test,"1111"); 
.................... //!read_eeprom(addr); 
.................... //!write_eeprom(addr,data); 
....................  
.................... while(TRUE) 
.................... { 
....................    key=_QuetPhimNhan(); 
086D:  BCF    0A.3
086E:  CALL   33B
086F:  BSF    0A.3
0870:  MOVF   78,W
0871:  MOVWF  2D
0872:  CLRF   2B
0873:  BTFSC  0B.7
0874:  BSF    2B.7
0875:  BCF    0B.7
....................    delay_ms(50); 
0876:  MOVLW  32
0877:  MOVWF  50
0878:  BCF    0A.3
0879:  CALL   07D
087A:  BSF    0A.3
087B:  BTFSC  2B.7
087C:  BSF    0B.7
....................    lcd_gotoxy(1,1); 
087D:  MOVLW  01
087E:  MOVWF  45
087F:  MOVWF  46
0880:  BCF    0A.3
0881:  CALL   1D6
0882:  BSF    0A.3
....................    if(key!=-1) 
0883:  MOVF   2D,W
0884:  SUBLW  FF
0885:  BTFSC  03.2
0886:  GOTO   13B
....................       { 
....................          switch(key) 
0887:  MOVF   2D,W
0888:  XORLW  64
0889:  BTFSC  03.2
088A:  GOTO   092
088B:  XORLW  68
088C:  BTFSC  03.2
088D:  GOTO   0D8
088E:  XORLW  69
088F:  BTFSC  03.2
0890:  GOTO   0DE
0891:  GOTO   136
....................          { 
....................          case 'd': 
....................                if(lcd_pointer==0) 
0892:  MOVF   2F,F
0893:  BTFSS  03.2
0894:  GOTO   0B7
....................                { 
....................                   lcd_gotoxy(1,1); 
0895:  MOVLW  01
0896:  MOVWF  45
0897:  MOVWF  46
0898:  BCF    0A.3
0899:  CALL   1D6
089A:  BSF    0A.3
....................                   lcd_putc("  "); 
089B:  MOVLW  AC
089C:  BSF    03.6
089D:  MOVWF  0D
089E:  MOVLW  00
089F:  MOVWF  0F
08A0:  BCF    0A.3
08A1:  BCF    03.6
08A2:  CALL   223
08A3:  BSF    0A.3
....................                   lcd_gotoxy(1,2); 
08A4:  MOVLW  01
08A5:  MOVWF  45
08A6:  MOVLW  02
08A7:  MOVWF  46
08A8:  BCF    0A.3
08A9:  CALL   1D6
08AA:  BSF    0A.3
....................                   lcd_putc("> "); 
08AB:  MOVLW  AE
08AC:  BSF    03.6
08AD:  MOVWF  0D
08AE:  MOVLW  00
08AF:  MOVWF  0F
08B0:  BCF    0A.3
08B1:  BCF    03.6
08B2:  CALL   223
08B3:  BSF    0A.3
....................                   lcd_pointer=1; 
08B4:  MOVLW  01
08B5:  MOVWF  2F
....................                } 
08B6:  GOTO   0D7
....................                else 
....................                { 
....................                   lcd_gotoxy(1,1); 
08B7:  MOVLW  01
08B8:  MOVWF  45
08B9:  MOVWF  46
08BA:  BCF    0A.3
08BB:  CALL   1D6
08BC:  BSF    0A.3
....................                   lcd_putc("> "); 
08BD:  MOVLW  B0
08BE:  BSF    03.6
08BF:  MOVWF  0D
08C0:  MOVLW  00
08C1:  MOVWF  0F
08C2:  BCF    0A.3
08C3:  BCF    03.6
08C4:  CALL   223
08C5:  BSF    0A.3
....................                   lcd_gotoxy(1,2); 
08C6:  MOVLW  01
08C7:  MOVWF  45
08C8:  MOVLW  02
08C9:  MOVWF  46
08CA:  BCF    0A.3
08CB:  CALL   1D6
08CC:  BSF    0A.3
....................                   lcd_putc("  "); 
08CD:  MOVLW  B2
08CE:  BSF    03.6
08CF:  MOVWF  0D
08D0:  MOVLW  00
08D1:  MOVWF  0F
08D2:  BCF    0A.3
08D3:  BCF    03.6
08D4:  CALL   223
08D5:  BSF    0A.3
....................                   lcd_pointer=0; 
08D6:  CLRF   2F
....................                } 
....................                break; 
08D7:  GOTO   13B
....................          case '\f':  
....................                   lcd_putc(key); 
08D8:  MOVF   2D,W
08D9:  MOVWF  44
08DA:  BCF    0A.3
08DB:  CALL   1F9
08DC:  BSF    0A.3
....................                   break; 
08DD:  GOTO   13B
....................          case 'e': 
....................                if(lcd_pointer==0) 
08DE:  MOVF   2F,F
08DF:  BTFSS  03.2
08E0:  GOTO   113
....................                { 
....................                   menu_TypingPass(); 
08E1:  BCF    0A.3
08E2:  CALL   66A
08E3:  BSF    0A.3
....................                   do{ 
....................                      TypingPass(); 
08E4:  BCF    0A.3
08E5:  CALL   479
08E6:  BSF    0A.3
....................                      CheckPass(InputPass); 
08E7:  CLRF   3D
08E8:  MOVLW  33
08E9:  MOVWF  3C
08EA:  BCF    0A.3
08EB:  CALL   67F
08EC:  BSF    0A.3
....................                      if(Check_flag==0){ 
08ED:  MOVF   31,F
08EE:  BTFSS  03.2
08EF:  GOTO   10C
....................                         CorrectPassword(); 
08F0:  BCF    0A.3
08F1:  CALL   6A6
08F2:  BSF    0A.3
....................                         device_Unlock(); 
08F3:  BCF    0A.3
08F4:  CALL   070
08F5:  BSF    0A.3
....................                         delay_ms(3000); 
08F6:  MOVLW  0C
08F7:  MOVWF  3C
08F8:  CLRF   2B
08F9:  BTFSC  0B.7
08FA:  BSF    2B.7
08FB:  BCF    0B.7
08FC:  MOVLW  FA
08FD:  MOVWF  50
08FE:  BCF    0A.3
08FF:  CALL   07D
0900:  BSF    0A.3
0901:  BTFSC  2B.7
0902:  BSF    0B.7
0903:  DECFSZ 3C,F
0904:  GOTO   0F8
....................                         device_Lock(); 
0905:  BCF    0A.3
0906:  CALL   092
0907:  BSF    0A.3
....................                         Init_system(); 
0908:  BCF    0A.3
0909:  CALL   2B0
090A:  BSF    0A.3
....................                         // break; 
....................                      } 
090B:  GOTO   10F
....................                      else{ 
....................                         IncorrectPassword(); 
090C:  BCF    0A.3
090D:  CALL   6B6
090E:  BSF    0A.3
....................                      } 
....................                   }while(Check_flag==1);   
090F:  DECFSZ 31,W
0910:  GOTO   112
0911:  GOTO   0E4
....................                } 
0912:  GOTO   135
....................                else  
....................                { 
....................                   menu_TypingPass(); 
0913:  BCF    0A.3
0914:  CALL   66A
0915:  BSF    0A.3
....................                   do{ 
....................                      TypingPass(); 
0916:  BCF    0A.3
0917:  CALL   479
0918:  BSF    0A.3
....................                      CheckPass(InputPass); 
0919:  CLRF   3D
091A:  MOVLW  33
091B:  MOVWF  3C
091C:  BCF    0A.3
091D:  CALL   67F
091E:  BSF    0A.3
....................                      if(Check_flag==0){ 
091F:  MOVF   31,F
0920:  BTFSS  03.2
0921:  GOTO   12F
....................                         CorrectPassword(); 
0922:  BCF    0A.3
0923:  CALL   6A6
0924:  BSF    0A.3
....................                         LED_Green(1); 
0925:  BSF    07.0
0926:  BCF    2C.0
0927:  MOVF   2C,W
0928:  BSF    03.5
0929:  MOVWF  07
....................                         ChangePass(); 
092A:  BCF    0A.3
092B:  BCF    03.5
092C:  CALL   4F9
092D:  BSF    0A.3
....................                      } 
092E:  GOTO   132
....................                      else{ 
....................                         IncorrectPassword(); 
092F:  BCF    0A.3
0930:  CALL   6B6
0931:  BSF    0A.3
....................                      } 
....................                   }while(Check_flag==1); 
0932:  DECFSZ 31,W
0933:  GOTO   135
0934:  GOTO   116
....................                    
....................                } 
....................                break; 
0935:  GOTO   13B
....................          default: 
....................                lcd_putc(key); 
0936:  MOVF   2D,W
0937:  MOVWF  44
0938:  BCF    0A.3
0939:  CALL   1F9
093A:  BSF    0A.3
....................                break; 
....................          }          
....................       } 
093B:  GOTO   06D
....................  
....................    //TODO: User Code 
.................... } 
.................... } 
.................... void init_screen(){ 
093C:  SLEEP
....................    lcd_init(); 
....................    lcd_gotoxy(1,1); 
*
02F3:  MOVLW  01
02F4:  MOVWF  45
02F5:  MOVWF  46
02F6:  CALL   1D6
....................    lcd_putc("> "); 
02F7:  MOVLW  B4
02F8:  BSF    03.6
02F9:  MOVWF  0D
02FA:  MOVLW  00
02FB:  MOVWF  0F
02FC:  BCF    03.6
02FD:  CALL   223
....................    lcd_putc("Unlock"); 
02FE:  MOVLW  B6
02FF:  BSF    03.6
0300:  MOVWF  0D
0301:  MOVLW  00
0302:  MOVWF  0F
0303:  BCF    03.6
0304:  CALL   223
....................    lcd_gotoxy(1,2); 
0305:  MOVLW  01
0306:  MOVWF  45
0307:  MOVLW  02
0308:  MOVWF  46
0309:  CALL   1D6
....................    lcd_putc("  "); 
030A:  MOVLW  BA
030B:  BSF    03.6
030C:  MOVWF  0D
030D:  MOVLW  00
030E:  MOVWF  0F
030F:  BCF    03.6
0310:  CALL   223
....................    lcd_putc("Change Pass"); 
0311:  MOVLW  BC
0312:  BSF    03.6
0313:  MOVWF  0D
0314:  MOVLW  00
0315:  MOVWF  0F
0316:  BCF    03.6
0317:  CALL   223
....................    _KhoiDongBanPhim(); 
.................... } 
.................... void init_variable(){ 
....................    index_pointer=0; 
*
0325:  CLRF   2E
....................    Check_count=0; 
0326:  CLRF   30
....................    Check_flag=0; 
0327:  CLRF   31
....................    lcd_pointer=0; 
0328:  CLRF   2F
....................    InputPass=""; 
0329:  CLRF   41
032A:  CLRF   42
032B:  MOVLW  33
032C:  MOVWF  04
032D:  BCF    03.7
032E:  MOVF   41,W
032F:  ADDWF  04,F
0330:  MOVF   42,W
0331:  CALL   06B
0332:  MOVWF  00
0333:  IORLW  00
0334:  BTFSC  03.2
0335:  GOTO   339
0336:  INCF   42,F
0337:  INCF   41,F
0338:  GOTO   32B
....................    Change_flag=0; 
0339:  CLRF   32
.................... } 
.................... void Init_system(){ 
....................    init_screen(); 
....................    init_variable(); 
033A:  RETURN
.................... } 
.................... void menu_TypingPass(){ 
....................    lcd_putc('\f'); 
*
066A:  MOVLW  0C
066B:  MOVWF  44
066C:  CALL   1F9
....................    lcd_gotoxy(3,1); 
066D:  MOVLW  03
066E:  MOVWF  45
066F:  MOVLW  01
0670:  MOVWF  46
0671:  CALL   1D6
....................    lcd_putc("Type Pass"); 
0672:  MOVLW  C2
0673:  BSF    03.6
0674:  MOVWF  0D
0675:  MOVLW  00
0676:  MOVWF  0F
0677:  BCF    03.6
0678:  CALL   223
....................    lcd_gotoxy(1,2); 
0679:  MOVLW  01
067A:  MOVWF  45
067B:  MOVLW  02
067C:  MOVWF  46
067D:  CALL   1D6
067E:  RETURN
.................... } 
....................  
.................... void TypingPass(){ 
*
0479:  MOVLW  01
047A:  MOVWF  41
....................    int Typing=1; 
....................    InputPass=""; 
047B:  CLRF   43
047C:  CLRF   44
047D:  MOVLW  33
047E:  MOVWF  04
047F:  BCF    03.7
0480:  MOVF   43,W
0481:  ADDWF  04,F
0482:  MOVF   44,W
0483:  CALL   06B
0484:  MOVWF  00
0485:  IORLW  00
0486:  BTFSC  03.2
0487:  GOTO   48B
0488:  INCF   44,F
0489:  INCF   43,F
048A:  GOTO   47D
....................    int count=size_pass; 
048B:  MOVLW  04
048C:  MOVWF  42
....................    while(Typing) 
048D:  MOVF   41,F
048E:  BTFSC  03.2
048F:  GOTO   4DE
....................    { 
....................       key=_QuetPhimNhan(); 
0490:  CALL   33B
0491:  MOVF   78,W
0492:  MOVWF  2D
0493:  CLRF   2B
0494:  BTFSC  0B.7
0495:  BSF    2B.7
0496:  BCF    0B.7
....................       delay_ms(50); 
0497:  MOVLW  32
0498:  MOVWF  50
0499:  CALL   07D
049A:  BTFSC  2B.7
049B:  BSF    0B.7
....................       if(key=='e'||count==0) 
049C:  MOVF   2D,W
049D:  SUBLW  65
049E:  BTFSC  03.2
049F:  GOTO   4A3
04A0:  MOVF   42,F
04A1:  BTFSS  03.2
04A2:  GOTO   4B9
....................          { 
....................             Typing=0; 
04A3:  CLRF   41
....................             lcd_putc('\f'); 
04A4:  MOVLW  0C
04A5:  MOVWF  44
04A6:  CALL   1F9
....................             lcd_gotoxy(1,1); 
04A7:  MOVLW  01
04A8:  MOVWF  45
04A9:  MOVWF  46
04AA:  CALL   1D6
....................             while(count<size_pass) 
04AB:  MOVF   42,W
04AC:  SUBLW  03
04AD:  BTFSS  03.0
04AE:  GOTO   4B9
....................             { 
....................                lcd_putc(InputPass[count]); 
04AF:  MOVLW  33
04B0:  ADDWF  42,W
04B1:  MOVWF  04
04B2:  BCF    03.7
04B3:  MOVF   00,W
04B4:  MOVWF  43
04B5:  MOVWF  44
04B6:  CALL   1F9
....................                count++; 
04B7:  INCF   42,F
04B8:  GOTO   4AB
....................             }   
....................          } 
....................       if(key>-1 && key!='\f' && key!='u' && key!='d' && key!='e'&& key!='*') 
04B9:  MOVF   2D,W
04BA:  XORLW  80
04BB:  SUBLW  7F
04BC:  BTFSC  03.0
04BD:  GOTO   4DD
04BE:  MOVF   2D,W
04BF:  SUBLW  0C
04C0:  BTFSC  03.2
04C1:  GOTO   4DD
04C2:  MOVF   2D,W
04C3:  SUBLW  75
04C4:  BTFSC  03.2
04C5:  GOTO   4DD
04C6:  MOVF   2D,W
04C7:  SUBLW  64
04C8:  BTFSC  03.2
04C9:  GOTO   4DD
04CA:  MOVF   2D,W
04CB:  SUBLW  65
04CC:  BTFSC  03.2
04CD:  GOTO   4DD
04CE:  MOVF   2D,W
04CF:  SUBLW  2A
04D0:  BTFSC  03.2
04D1:  GOTO   4DD
....................          { 
....................             lcd_putc(key); 
04D2:  MOVF   2D,W
04D3:  MOVWF  44
04D4:  CALL   1F9
....................             InputPass[size_pass-count]=key; 
04D5:  MOVF   42,W
04D6:  SUBLW  04
04D7:  ADDLW  33
04D8:  MOVWF  04
04D9:  BCF    03.7
04DA:  MOVF   2D,W
04DB:  MOVWF  00
....................             count--; 
04DC:  DECF   42,F
....................          } 
04DD:  GOTO   48D
....................    }  
04DE:  RETURN
.................... } 
....................  
.................... void CheckPass(char *check){ 
....................    Check_flag=0; // 0 is right password 
*
067F:  CLRF   31
....................    int count=0; 
0680:  CLRF   3E
....................    while(count<size_pass) 
0681:  MOVF   3E,W
0682:  SUBLW  03
0683:  BTFSS  03.0
0684:  GOTO   6A5
....................       { 
....................          lcd_putc(check[count]); 
0685:  MOVF   3E,W
0686:  ADDWF  3C,W
0687:  MOVWF  04
0688:  BCF    03.7
0689:  BTFSC  3D.0
068A:  BSF    03.7
068B:  MOVF   00,W
068C:  MOVWF  3F
068D:  MOVWF  44
068E:  CALL   1F9
....................          if(check[count]!=pass[count]) 
068F:  MOVF   3E,W
0690:  ADDWF  3C,W
0691:  MOVWF  04
0692:  BCF    03.7
0693:  BTFSC  3D.0
0694:  BSF    03.7
0695:  MOVF   00,W
0696:  MOVWF  3F
0697:  MOVLW  37
0698:  ADDWF  3E,W
0699:  MOVWF  04
069A:  BCF    03.7
069B:  MOVF   00,W
069C:  SUBWF  3F,W
069D:  BTFSC  03.2
069E:  GOTO   6A3
....................             { 
....................                Check_flag=1; 
069F:  MOVLW  01
06A0:  MOVWF  31
....................                Check_count++; 
06A1:  INCF   30,F
....................                break; 
06A2:  GOTO   6A5
....................             } 
....................          count++; 
06A3:  INCF   3E,F
06A4:  GOTO   681
....................       } 
06A5:  RETURN
.................... } 
....................  
.................... void CorrectPassword(){ 
....................    lcd_putc('\f'); 
06A6:  MOVLW  0C
06A7:  MOVWF  44
06A8:  CALL   1F9
....................    lcd_gotoxy(3,1); 
06A9:  MOVLW  03
06AA:  MOVWF  45
06AB:  MOVLW  01
06AC:  MOVWF  46
06AD:  CALL   1D6
....................    lcd_putc("Correct");   
06AE:  MOVLW  C7
06AF:  BSF    03.6
06B0:  MOVWF  0D
06B1:  MOVLW  00
06B2:  MOVWF  0F
06B3:  BCF    03.6
06B4:  CALL   223
06B5:  RETURN
.................... } 
.................... void device_Unlock(){ 
....................    Lock(1); 
*
0070:  BSF    07.3
0071:  BCF    2C.3
0072:  MOVF   2C,W
0073:  BSF    03.5
0074:  MOVWF  07
....................    LED_Green(1); 
0075:  BCF    03.5
0076:  BSF    07.0
0077:  BCF    2C.0
0078:  MOVF   2C,W
0079:  BSF    03.5
007A:  MOVWF  07
007B:  BCF    03.5
007C:  RETURN
.................... } 
.................... void device_Lock(){ 
....................    Lock(0); 
*
0092:  BCF    07.3
0093:  BCF    2C.3
0094:  MOVF   2C,W
0095:  BSF    03.5
0096:  MOVWF  07
....................    LED_Green(0); 
0097:  BCF    03.5
0098:  BCF    07.0
0099:  BCF    2C.0
009A:  MOVF   2C,W
009B:  BSF    03.5
009C:  MOVWF  07
009D:  BCF    03.5
009E:  RETURN
.................... } 
.................... void device_Alert(){ 
....................    Buzzer(1); 
*
04DF:  BSF    07.2
04E0:  BCF    2C.2
04E1:  MOVF   2C,W
04E2:  BSF    03.5
04E3:  MOVWF  07
....................    LED_Red(1); 
04E4:  BCF    03.5
04E5:  BSF    07.1
04E6:  BCF    2C.1
04E7:  MOVF   2C,W
04E8:  BSF    03.5
04E9:  MOVWF  07
04EA:  BCF    03.5
04EB:  RETURN
.................... } 
.................... void device_Alert_Stop(){ 
....................    Buzzer(0); 
04EC:  BCF    07.2
04ED:  BCF    2C.2
04EE:  MOVF   2C,W
04EF:  BSF    03.5
04F0:  MOVWF  07
....................    LED_Red(0); 
04F1:  BCF    03.5
04F2:  BCF    07.1
04F3:  BCF    2C.1
04F4:  MOVF   2C,W
04F5:  BSF    03.5
04F6:  MOVWF  07
04F7:  BCF    03.5
04F8:  RETURN
.................... } 
....................  
.................... void IncorrectPassword(){ 
....................    lcd_putc('\f'); 
*
06B6:  MOVLW  0C
06B7:  MOVWF  44
06B8:  CALL   1F9
....................    lcd_gotoxy(3,1); 
06B9:  MOVLW  03
06BA:  MOVWF  45
06BB:  MOVLW  01
06BC:  MOVWF  46
06BD:  CALL   1D6
....................    lcd_putc("Incorrect"); 
06BE:  MOVLW  CB
06BF:  BSF    03.6
06C0:  MOVWF  0D
06C1:  MOVLW  00
06C2:  MOVWF  0F
06C3:  BCF    03.6
06C4:  CALL   223
....................    device_Alert(); 
06C5:  CALL   4DF
....................    delay_ms(3000); 
06C6:  MOVLW  0C
06C7:  MOVWF  3C
06C8:  CLRF   2B
06C9:  BTFSC  0B.7
06CA:  BSF    2B.7
06CB:  BCF    0B.7
06CC:  MOVLW  FA
06CD:  MOVWF  50
06CE:  CALL   07D
06CF:  BTFSC  2B.7
06D0:  BSF    0B.7
06D1:  DECFSZ 3C,F
06D2:  GOTO   6C8
....................    device_Alert_Stop(); 
06D3:  CALL   4EC
....................    lcd_putc('\f'); 
06D4:  MOVLW  0C
06D5:  MOVWF  44
06D6:  CALL   1F9
....................    lcd_gotoxy(1,1); 
06D7:  MOVLW  01
06D8:  MOVWF  45
06D9:  MOVWF  46
06DA:  CALL   1D6
....................    lcd_putc("Retype Pass:"); 
06DB:  MOVLW  D0
06DC:  BSF    03.6
06DD:  MOVWF  0D
06DE:  MOVLW  00
06DF:  MOVWF  0F
06E0:  BCF    03.6
06E1:  CALL   223
....................    lcd_gotoxy(1,2); 
06E2:  MOVLW  01
06E3:  MOVWF  45
06E4:  MOVLW  02
06E5:  MOVWF  46
06E6:  CALL   1D6
....................    // CheckPass(TypingPass()); 
....................    if(Check_count==2) 
06E7:  MOVF   30,W
06E8:  SUBLW  02
06E9:  BTFSS  03.2
06EA:  GOTO   730
....................       { 
....................          device_Alert(); 
06EB:  CALL   4DF
....................          lcd_putc('\f'); 
06EC:  MOVLW  0C
06ED:  MOVWF  44
06EE:  CALL   1F9
....................          lcd_gotoxy(1,1); 
06EF:  MOVLW  01
06F0:  MOVWF  45
06F1:  MOVWF  46
06F2:  CALL   1D6
....................          lcd_putc("Incorrect"); 
06F3:  MOVLW  D7
06F4:  BSF    03.6
06F5:  MOVWF  0D
06F6:  MOVLW  00
06F7:  MOVWF  0F
06F8:  BCF    03.6
06F9:  CALL   223
....................          lcd_gotoxy(1,2); 
06FA:  MOVLW  01
06FB:  MOVWF  45
06FC:  MOVLW  02
06FD:  MOVWF  46
06FE:  CALL   1D6
....................          lcd_putc("2 times"); 
06FF:  MOVLW  DC
0700:  BSF    03.6
0701:  MOVWF  0D
0702:  MOVLW  00
0703:  MOVWF  0F
0704:  BCF    03.6
0705:  CALL   223
....................          delay_ms(3000); 
0706:  MOVLW  0C
0707:  MOVWF  3C
0708:  CLRF   2B
0709:  BTFSC  0B.7
070A:  BSF    2B.7
070B:  BCF    0B.7
070C:  MOVLW  FA
070D:  MOVWF  50
070E:  CALL   07D
070F:  BTFSC  2B.7
0710:  BSF    0B.7
0711:  DECFSZ 3C,F
0712:  GOTO   708
....................          lcd_putc('\f'); 
0713:  MOVLW  0C
0714:  MOVWF  44
0715:  CALL   1F9
....................          lcd_gotoxy(1,1); 
0716:  MOVLW  01
0717:  MOVWF  45
0718:  MOVWF  46
0719:  CALL   1D6
....................          lcd_putc("Restarting......."); 
071A:  MOVLW  E0
071B:  BSF    03.6
071C:  MOVWF  0D
071D:  MOVLW  00
071E:  MOVWF  0F
071F:  BCF    03.6
0720:  CALL   223
....................          delay_ms(5000); 
0721:  MOVLW  14
0722:  MOVWF  3C
0723:  CLRF   2B
0724:  BTFSC  0B.7
0725:  BSF    2B.7
0726:  BCF    0B.7
0727:  MOVLW  FA
0728:  MOVWF  50
0729:  CALL   07D
072A:  BTFSC  2B.7
072B:  BSF    0B.7
072C:  DECFSZ 3C,F
072D:  GOTO   723
....................          device_Alert_Stop(); 
072E:  CALL   4EC
....................          Init_system(); 
072F:  CALL   2B0
....................       } 
0730:  RETURN
.................... } 
....................  
.................... void ChangePass(){ 
*
04F9:  CLRF   3C
....................    int count=0; 
....................    Check_count=0; 
04FA:  CLRF   30
....................    Check_flag=0; 
04FB:  CLRF   31
....................    Change_flag=0; // 1 for successful change 
04FC:  CLRF   32
....................    lcd_putc("\f"); 
04FD:  MOVLW  E9
04FE:  BSF    03.6
04FF:  MOVWF  0D
0500:  MOVLW  00
0501:  MOVWF  0F
0502:  BCF    03.6
0503:  CALL   223
....................    lcd_gotoxy(1,1); 
0504:  MOVLW  01
0505:  MOVWF  45
0506:  MOVWF  46
0507:  CALL   1D6
....................    lcd_putc("New Password:"); 
0508:  MOVLW  EA
0509:  BSF    03.6
050A:  MOVWF  0D
050B:  MOVLW  00
050C:  MOVWF  0F
050D:  BCF    03.6
050E:  CALL   223
....................    lcd_gotoxy(1,2); 
050F:  MOVLW  01
0510:  MOVWF  45
0511:  MOVLW  02
0512:  MOVWF  46
0513:  CALL   1D6
....................    TypingPass(); 
0514:  CALL   479
....................    char try_newpass[size_pass]=""; 
0515:  CLRF   3D
....................    while(count<size_pass) 
0516:  MOVF   3C,W
0517:  SUBLW  03
0518:  BTFSS  03.0
0519:  GOTO   537
....................    { 
....................       lcd_putc(InputPass[count]); 
051A:  MOVLW  33
051B:  ADDWF  3C,W
051C:  MOVWF  04
051D:  BCF    03.7
051E:  MOVF   00,W
051F:  MOVWF  41
0520:  MOVWF  44
0521:  CALL   1F9
....................       try_newpass[count]=InputPass[count]; 
0522:  MOVLW  3D
0523:  ADDWF  3C,W
0524:  MOVWF  78
0525:  CLRF   7A
0526:  BTFSC  03.0
0527:  INCF   7A,F
0528:  MOVLW  33
0529:  ADDWF  3C,W
052A:  MOVWF  04
052B:  BCF    03.7
052C:  MOVF   00,W
052D:  MOVWF  43
052E:  MOVF   78,W
052F:  MOVWF  04
0530:  BCF    03.7
0531:  BTFSC  7A.0
0532:  BSF    03.7
0533:  MOVF   43,W
0534:  MOVWF  00
....................       // lcd_putc(check[count]); 
....................       // try_newpass[count]=check[count]; 
....................       count++; 
0535:  INCF   3C,F
0536:  GOTO   516
....................    } 
....................    lcd_putc("\f"); 
0537:  MOVLW  F1
0538:  BSF    03.6
0539:  MOVWF  0D
053A:  MOVLW  00
053B:  MOVWF  0F
053C:  BCF    03.6
053D:  CALL   223
....................    lcd_gotoxy(3,1); 
053E:  MOVLW  03
053F:  MOVWF  45
0540:  MOVLW  01
0541:  MOVWF  46
0542:  CALL   1D6
....................    lcd_putc("Retype:"); 
0543:  MOVLW  F2
0544:  BSF    03.6
0545:  MOVWF  0D
0546:  MOVLW  00
0547:  MOVWF  0F
0548:  BCF    03.6
0549:  CALL   223
....................    lcd_gotoxy(1,2); 
054A:  MOVLW  01
054B:  MOVWF  45
054C:  MOVLW  02
054D:  MOVWF  46
054E:  CALL   1D6
....................    TypingPass(); 
054F:  CALL   479
....................    count=0; 
0550:  CLRF   3C
....................    while(count<size_pass) 
0551:  MOVF   3C,W
0552:  SUBLW  03
0553:  BTFSS  03.0
0554:  GOTO   570
....................       { 
....................          lcd_putc(InputPass[count]); 
0555:  MOVLW  33
0556:  ADDWF  3C,W
0557:  MOVWF  04
0558:  BCF    03.7
0559:  MOVF   00,W
055A:  MOVWF  41
055B:  MOVWF  44
055C:  CALL   1F9
....................          if(try_newpass[count]!=InputPass[count]) 
055D:  MOVLW  3D
055E:  ADDWF  3C,W
055F:  MOVWF  04
0560:  BCF    03.7
0561:  MOVF   00,W
0562:  MOVWF  41
0563:  MOVLW  33
0564:  ADDWF  3C,W
0565:  MOVWF  04
0566:  BCF    03.7
0567:  MOVF   00,W
0568:  SUBWF  41,W
0569:  BTFSC  03.2
056A:  GOTO   56E
....................             { 
....................                Check_flag=1; 
056B:  MOVLW  01
056C:  MOVWF  31
....................                break; 
056D:  GOTO   570
....................             } 
....................          count++; 
056E:  INCF   3C,F
056F:  GOTO   551
....................       } 
....................    if(Check_flag==0){ 
0570:  MOVF   31,F
0571:  BTFSS  03.2
0572:  GOTO   5F2
....................       count=0; 
0573:  CLRF   3C
....................       while(count<size_pass) 
0574:  MOVF   3C,W
0575:  SUBLW  03
0576:  BTFSS  03.0
0577:  GOTO   595
....................          { 
....................             lcd_putc(InputPass[count]); 
0578:  MOVLW  33
0579:  ADDWF  3C,W
057A:  MOVWF  04
057B:  BCF    03.7
057C:  MOVF   00,W
057D:  MOVWF  41
057E:  MOVWF  44
057F:  CALL   1F9
....................             pass[count]=try_newpass[count]; 
0580:  MOVLW  37
0581:  ADDWF  3C,W
0582:  MOVWF  78
0583:  CLRF   7A
0584:  BTFSC  03.0
0585:  INCF   7A,F
0586:  MOVLW  3D
0587:  ADDWF  3C,W
0588:  MOVWF  04
0589:  BCF    03.7
058A:  MOVF   00,W
058B:  MOVWF  43
058C:  MOVF   78,W
058D:  MOVWF  04
058E:  BCF    03.7
058F:  BTFSC  7A.0
0590:  BSF    03.7
0591:  MOVF   43,W
0592:  MOVWF  00
....................             count++; 
0593:  INCF   3C,F
0594:  GOTO   574
....................          } 
....................       lcd_putc("\f"); 
0595:  MOVLW  F6
0596:  BSF    03.6
0597:  MOVWF  0D
0598:  MOVLW  00
0599:  MOVWF  0F
059A:  BCF    03.6
059B:  CALL   223
....................       lcd_gotoxy(1,1); 
059C:  MOVLW  01
059D:  MOVWF  45
059E:  MOVWF  46
059F:  CALL   1D6
....................       lcd_putc("Pass is Changed"); 
05A0:  MOVLW  F7
05A1:  BSF    03.6
05A2:  MOVWF  0D
05A3:  MOVLW  00
05A4:  MOVWF  0F
05A5:  BCF    03.6
05A6:  CALL   223
....................       eeprom_write_string(0x08,pass); 
05A7:  MOVLW  08
05A8:  MOVWF  41
05A9:  CLRF   43
05AA:  MOVLW  37
05AB:  MOVWF  42
....................       delay_ms(3000); 
*
05DD:  MOVLW  0C
05DE:  MOVWF  41
05DF:  CLRF   2B
05E0:  BTFSC  0B.7
05E1:  BSF    2B.7
05E2:  BCF    0B.7
05E3:  MOVLW  FA
05E4:  MOVWF  50
05E5:  CALL   07D
05E6:  BTFSC  2B.7
05E7:  BSF    0B.7
05E8:  DECFSZ 41,F
05E9:  GOTO   5DF
....................       LED_Green(0); 
05EA:  BCF    07.0
05EB:  BCF    2C.0
05EC:  MOVF   2C,W
05ED:  BSF    03.5
05EE:  MOVWF  07
....................       Init_system(); 
05EF:  BCF    03.5
05F0:  CALL   2B0
....................       } 
05F1:  GOTO   645
....................    else{ 
....................       LED_Green(0); 
05F2:  BCF    07.0
05F3:  BCF    2C.0
05F4:  MOVF   2C,W
05F5:  BSF    03.5
05F6:  MOVWF  07
....................       lcd_putc("\f"); 
05F7:  MOVLW  FF
05F8:  BCF    03.5
05F9:  BSF    03.6
05FA:  MOVWF  0D
05FB:  MOVLW  00
05FC:  MOVWF  0F
05FD:  BCF    03.6
05FE:  CALL   223
....................       lcd_gotoxy(1,1); 
05FF:  MOVLW  01
0600:  MOVWF  45
0601:  MOVWF  46
0602:  CALL   1D6
....................       lcd_putc("Retype Password"); 
0603:  MOVLW  00
0604:  BSF    03.6
0605:  MOVWF  0D
0606:  MOVLW  01
0607:  MOVWF  0F
0608:  BCF    03.6
0609:  CALL   223
....................       lcd_gotoxy(1,2); 
060A:  MOVLW  01
060B:  MOVWF  45
060C:  MOVLW  02
060D:  MOVWF  46
060E:  CALL   1D6
....................       lcd_putc("doesn't match"); 
060F:  MOVLW  08
0610:  BSF    03.6
0611:  MOVWF  0D
0612:  MOVLW  01
0613:  MOVWF  0F
0614:  BCF    03.6
0615:  CALL   223
....................       device_Alert(); 
0616:  CALL   4DF
....................       delay_ms(3000); 
0617:  MOVLW  0C
0618:  MOVWF  41
0619:  CLRF   2B
061A:  BTFSC  0B.7
061B:  BSF    2B.7
061C:  BCF    0B.7
061D:  MOVLW  FA
061E:  MOVWF  50
061F:  CALL   07D
0620:  BTFSC  2B.7
0621:  BSF    0B.7
0622:  DECFSZ 41,F
0623:  GOTO   619
....................       device_Alert_Stop(); 
0624:  CALL   4EC
....................       lcd_putc("\f"); 
0625:  MOVLW  0F
0626:  BSF    03.6
0627:  MOVWF  0D
0628:  MOVLW  01
0629:  MOVWF  0F
062A:  BCF    03.6
062B:  CALL   223
....................       lcd_gotoxy(1,1); 
062C:  MOVLW  01
062D:  MOVWF  45
062E:  MOVWF  46
062F:  CALL   1D6
....................       lcd_putc("Restarting......."); 
0630:  MOVLW  10
0631:  BSF    03.6
0632:  MOVWF  0D
0633:  MOVLW  01
0634:  MOVWF  0F
0635:  BCF    03.6
0636:  CALL   223
....................       delay_ms(5000); 
0637:  MOVLW  14
0638:  MOVWF  41
0639:  CLRF   2B
063A:  BTFSC  0B.7
063B:  BSF    2B.7
063C:  BCF    0B.7
063D:  MOVLW  FA
063E:  MOVWF  50
063F:  CALL   07D
0640:  BTFSC  2B.7
0641:  BSF    0B.7
0642:  DECFSZ 41,F
0643:  GOTO   639
....................       Init_system(); 
0644:  CALL   2B0
....................    } 
0645:  RETURN
.................... } 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
